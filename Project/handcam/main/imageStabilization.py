import os
import pathlib
import pandas as pd
from os import listdir
from matplotlib import image
from matplotlib import pyplot
import PIL
from PIL import Image
import time
from flask import current_app as curr_app


def apply_imageStabilization( filePath):

	print("Image Stabilization function started execution")
	# imudir = pathlib.Path().absolute()
	# print("imu_dir value : " + str(imudir))
	imu_dir = filePath + "/data/IMU.csv"
	# imu_dir = os.getcwd()+"/ziKdmXdY/home/pi/data/IMU.csv" #csv file placed out of 'data' folder generated by v4
	print("imu_dir value : " + imu_dir)
	df_imu_data = pd.read_csv(imu_dir,header=None,names=['timestamp','ax','ay','az','gx','gy','gz','roll','pitch','yaw'],index_col='timestamp')

	#empty lists
	image_filename=[] 
	image_timestamp=[]

	#folder generated by v4
	# image_dir = os.getcwd()+"//ziKdmXdY/home/pi/data"
	image_dir = filePath + "/data"

	for filename in listdir(image_dir):
		if (filename!='IMU.csv'): #imread cannot skip the csv file
			img_data = image.imread( image_dir + "/" + filename) 
			image_filename.append(filename)
			split_filename=filename.split("-",1) #splitting string to take care of segmentation in timestamp
			newfilename=split_filename[0]
			#image_timestamp.append(filename.replace('-1.jpg','')) # to create timestamped index column format extension is removed
			image_timestamp.append(newfilename)
	

	df_cam_data=pd.DataFrame({'timestamp':image_timestamp,'image_filename':image_filename})

	df_cam_data.set_index('timestamp',inplace=True)

	#convert the dtype 'object' to float64 to allow calculations (time series index sorting)
	print(df_cam_data.index)
	df_cam_data.index=pd.to_numeric(df_cam_data.index)

	#merging the two time series dataframes by timestamp
	merged=df_imu_data.join(df_cam_data,how='outer')
	merged['image_filename'].fillna(0,inplace=True)
	updated_csvPath = filePath + "/updated_csv"
	create_directory( updated_csvPath)
	merged.to_csv( updated_csvPath + '/merged.csv') 

	#handling NA rows from imu_data to sync with cam_data-- using simple average
	merged_handled=merged.interpolate(method='linear',limit_direction='forward')

	#save file as csv
	merged_handled.to_csv( updated_csvPath + '/merged_handled.csv') 
	print("Merged csv file is generated successfully")

	#DOES CURRENT DIRECTORY HAVE ROTATED IMAGES, IF NOT CREATE A FILE
	saving_dir = filePath + "/rotated_images"
	create_directory( saving_dir)

	# saving_dir = curr_app.root_path + "/" + "static/temp/home/pi/data/rotated_images"
	# saving_dir = os.getcwd() + "/rotated_images"

	for filename in listdir(image_dir):
		if (filename!='IMU.csv'):
			image_original=Image.open(image_dir+"/"+filename) #load image
			#for filename in merged_handled find roll (conditional data selection)
			angle = merged_handled.roll[merged_handled.image_filename==filename]
			theta=-angle.values #angle range needs verification: gimbal lock
		
			image_rotated=image_original.rotate(theta,expand=True) #using 'expand' attribute to store the entire image, prevent cropping
			image_rotated.save(saving_dir+"/"+filename)
	print("Image Rotation successful")

# apply_imageStabilization()


def create_directory(path):
	try:
		os.mkdir(path)
	except OSError:
		print ("Creation of the directory %s failed" % path)
	else:
		print ("Successfully created the directory %s " % path)